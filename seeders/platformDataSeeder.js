const { PlatformSettings, Currency, Language } = require('../models');

const seedPlatformData = async () => {
  try {
    console.log('üå± Seeding platform data...');

    // 1. Create default platform settings
    const existingSettings = await PlatformSettings.findOne();
    if (!existingSettings) {
      await PlatformSettings.create({
        siteName: 'Market App',
        siteDescription: 'Professional E-commerce Platform for Uzbekistan',
        siteLogo: '/uploads/logo/default-logo.png',
        siteFavicon: '/uploads/logo/favicon.ico',
        platformCommission: 5.00,
        minOrderAmount: 10000.00, // 10,000 UZS
        maxOrderAmount: 50000000.00, // 50,000,000 UZS
        freeShippingThreshold: 100000.00, // 100,000 UZS
        defaultCurrency: 'UZS',
        defaultLanguage: 'uz',
        maintenanceMode: false,
        registrationEnabled: true,
        guestCheckoutEnabled: true,
        reviewsEnabled: true,
        wishlistEnabled: true,
        maxFileSize: 5242880, // 5MB
        allowedFileTypes: ['jpg', 'jpeg', 'png', 'webp', 'gif'],
        maxImagesPerProduct: 10,
        contactInfo: {
          phone: '+998901234567',
          address: 'Toshkent, O\'zbekiston',
          workingHours: '9:00 - 18:00'
        },
        socialMedia: {
          facebook: 'https://facebook.com/marketapp',
          instagram: 'https://instagram.com/marketapp',
          twitter: 'https://twitter.com/marketapp',
          telegram: 'https://t.me/marketapp',
          youtube: 'https://youtube.com/marketapp'
        },
        metaTitle: 'Market App - Professional E-commerce Platform',
        metaDescription: 'Professional e-commerce platform for online shopping in Uzbekistan',
        metaKeywords: 'e-commerce, online shopping, marketplace, uzbekistan',
        features: {
          multiVendor: true,
          subscriptions: false,
          digitalProducts: false,
          affiliateProgram: false,
          loyaltyProgram: false,
          coupons: true,
          flashSales: true,
          productComparison: true,
          productRecommendations: true
        }
      });
      console.log('‚úÖ Default platform settings created');
    }

    // 2. Create default currencies
    const currencies = [
      {
        code: 'UZS',
        name: 'O\'zbek so\'mi',
        symbol: 'so\'m',
        rate: 1.0,
        isDefault: true,
        isActive: true,
        position: 'after',
        decimalPlaces: 0,
        thousandsSeparator: ' ',
        decimalSeparator: ','
      },
      {
        code: 'USD',
        name: 'US Dollar',
        symbol: '$',
        rate: 0.000082,
        isDefault: false,
        isActive: true,
        position: 'before',
        decimalPlaces: 2,
        thousandsSeparator: ',',
        decimalSeparator: '.'
      },
      {
        code: 'EUR',
        name: 'Euro',
        symbol: '‚Ç¨',
        rate: 0.000076,
        isDefault: false,
        isActive: true,
        position: 'before',
        decimalPlaces: 2,
        thousandsSeparator: ',',
        decimalSeparator: '.'
      },
      {
        code: 'RUB',
        name: 'Russian Ruble',
        symbol: '‚ÇΩ',
        rate: 0.0076,
        isDefault: false,
        isActive: true,
        position: 'after',
        decimalPlaces: 2,
        thousandsSeparator: ' ',
        decimalSeparator: ','
      }
    ];

    for (const currencyData of currencies) {
      const existingCurrency = await Currency.findByPk(currencyData.code);
      if (!existingCurrency) {
        await Currency.create(currencyData);
        console.log(`‚úÖ Currency ${currencyData.code} created`);
      }
    }

    // 3. Create default languages
    const languages = [
      {
        code: 'uz',
        name: 'O\'zbekcha',
        nativeName: 'O\'zbekcha',
        flag: 'üá∫üáø',
        isDefault: true,
        isActive: true,
        direction: 'ltr',
        translations: {
          // Common translations
          'welcome': 'Xush kelibsiz',
          'home': 'Bosh sahifa',
          'products': 'Mahsulotlar',
          'categories': 'Kategoriyalar',
          'cart': 'Savatcha',
          'checkout': 'To\'lov',
          'login': 'Kirish',
          'register': 'Ro\'yxatdan o\'tish',
          'logout': 'Chiqish',
          'profile': 'Profil',
          'orders': 'Buyurtmalar',
          'search': 'Qidirish',
          'add_to_cart': 'Savatchaga qo\'shish',
          'buy_now': 'Hozir sotib olish',
          'price': 'Narx',
          'quantity': 'Miqdor',
          'total': 'Jami',
          'shipping': 'Yetkazib berish',
          'payment': 'To\'lov',
          'contact': 'Aloqa',
          'about': 'Biz haqimizda',
          'terms': 'Foydalanish shartlari',
          'privacy': 'Maxfiylik siyosati',
          'loading': 'Yuklanmoqda...',
          'error': 'Xatolik',
          'success': 'Muvaffaqiyat',
          'cancel': 'Bekor qilish',
          'save': 'Saqlash',
          'edit': 'Tahrirlash',
          'delete': 'O\'chirish',
          'confirm': 'Tasdiqlash',
          'yes': 'Ha',
          'no': 'Yo\'q'
        }
      },
      {
        code: 'ru',
        name: '–†—É—Å—Å–∫–∏–π',
        nativeName: '–†—É—Å—Å–∫–∏–π',
        flag: 'üá∑üá∫',
        isDefault: false,
        isActive: true,
        direction: 'ltr',
        translations: {
          'welcome': '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å',
          'home': '–ì–ª–∞–≤–Ω–∞—è',
          'products': '–¢–æ–≤–∞—Ä—ã',
          'categories': '–ö–∞—Ç–µ–≥–æ—Ä–∏–∏',
          'cart': '–ö–æ—Ä–∑–∏–Ω–∞',
          'checkout': '–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞',
          'login': '–í–æ–π—Ç–∏',
          'register': '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è',
          'logout': '–í—ã–π—Ç–∏',
          'profile': '–ü—Ä–æ—Ñ–∏–ª—å',
          'orders': '–ó–∞–∫–∞–∑—ã',
          'search': '–ü–æ–∏—Å–∫',
          'add_to_cart': '–í –∫–æ—Ä–∑–∏–Ω—É',
          'buy_now': '–ö—É–ø–∏—Ç—å —Å–µ–π—á–∞—Å',
          'price': '–¶–µ–Ω–∞',
          'quantity': '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ',
          'total': '–ò—Ç–æ–≥–æ',
          'shipping': '–î–æ—Å—Ç–∞–≤–∫–∞',
          'payment': '–û–ø–ª–∞—Ç–∞',
          'contact': '–ö–æ–Ω—Ç–∞–∫—Ç—ã',
          'about': '–û –Ω–∞—Å',
          'terms': '–£—Å–ª–æ–≤–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è',
          'privacy': '–ü–æ–ª–∏—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏',
          'loading': '–ó–∞–≥—Ä—É–∑–∫–∞...',
          'error': '–û—à–∏–±–∫–∞',
          'success': '–£—Å–ø–µ—Ö',
          'cancel': '–û—Ç–º–µ–Ω–∞',
          'save': '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å',
          'edit': '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å',
          'delete': '–£–¥–∞–ª–∏—Ç—å',
          'confirm': '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å',
          'yes': '–î–∞',
          'no': '–ù–µ—Ç'
        }
      },
      {
        code: 'en',
        name: 'English',
        nativeName: 'English',
        flag: 'üá∫üá∏',
        isDefault: false,
        isActive: true,
        direction: 'ltr',
        translations: {
          'welcome': 'Welcome',
          'home': 'Home',
          'products': 'Products',
          'categories': 'Categories',
          'cart': 'Cart',
          'checkout': 'Checkout',
          'login': 'Login',
          'register': 'Register',
          'logout': 'Logout',
          'profile': 'Profile',
          'orders': 'Orders',
          'search': 'Search',
          'add_to_cart': 'Add to Cart',
          'buy_now': 'Buy Now',
          'price': 'Price',
          'quantity': 'Quantity',
          'total': 'Total',
          'shipping': 'Shipping',
          'payment': 'Payment',
          'contact': 'Contact',
          'about': 'About Us',
          'terms': 'Terms of Service',
          'privacy': 'Privacy Policy',
          'loading': 'Loading...',
          'error': 'Error',
          'success': 'Success',
          'cancel': 'Cancel',
          'save': 'Save',
          'edit': 'Edit',
          'delete': 'Delete',
          'confirm': 'Confirm',
          'yes': 'Yes',
          'no': 'No'
        }
      }
    ];

    for (const languageData of languages) {
      const existingLanguage = await Language.findByPk(languageData.code);
      if (!existingLanguage) {
        await Language.create(languageData);
        console.log(`‚úÖ Language ${languageData.code} created`);
      }
    }

    console.log('üéâ Platform data seeding completed successfully!');
  } catch (error) {
    console.error('‚ùå Error seeding platform data:', error);
    throw error;
  }
};

// Run seeder if called directly
if (require.main === module) {
  const { sequelize } = require('../models');
  
  sequelize.authenticate()
    .then(() => {
      console.log('üì° Database connected successfully');
      return seedPlatformData();
    })
    .then(() => {
      console.log('‚úÖ Seeding completed');
      process.exit(0);
    })
    .catch((error) => {
      console.error('‚ùå Seeding failed:', error);
      process.exit(1);
    });
}

module.exports = seedPlatformData;